spring.application.name=userAuthenticationServices

server.port = 8081

#MySQL database connection

spring.datasource.url = jdbc:mysql://localhost:3306/kanban_board_project_db?createDatabaseIfNotExist=true

spring.datasource.username = root

spring.datasource.password = root1234

spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver


# Hibernate (JPA) Settings

spring.jpa.hibernate.ddl-auto = update

spring.jpa.show-sql = true

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect


# OTP generation settings

# The email server you are using to send emails ... for gmail, it is smtp.gmail.com
spring.mail.host = smtp.gmail.com

# Port no. for sending email securely
spring.mail.port = 587 

# Your email address that will send the OTPs
spring.mail.username = roopalnegi147@gmail.com

# App password -- from gmail are 16 characters without space
spring.mail.password =  fvcrbkiplccwsbmm

# Enables authentication -- the email server needs to check credentials
spring.mail.properties.mail.smtp.auth = true

# Enables TLS (Transport Layer Security) encryption -- your email are sent securely
spring.mail.properties.mail.smtp.starttls.enable = true  

# Ensures that TLS (Transport Layer Security) is required for the SMTP connection.
# Gmail requires a secure connection before allowing emails to be sent.
spring.mail.properties.mail.smtp.starttls.required=true

# Trust the SSL certificate provided by the SMTP server (Gmail in this case).
# This prevents SSL handshake errors if the certificate is not automatically trusted.
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com

#Specify the protocol to be used for sending mail. 'smtp' is the standard protocol.
spring.mail.transport.protocol=smtp

# It prints detailed information about the email sending process in the console,
# useful for debugging connection or authentication issues.
spring.mail.properties.mail.debug=true

